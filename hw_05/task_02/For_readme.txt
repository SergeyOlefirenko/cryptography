# Генерація імітовставки (Message Authentication Code, MAC)

## Мета
Метою цього завдання є **генерування MAC (Message Authentication Code)** для перевірки **цілісності та автентичності** даних, отриманих після шифрування.

---

## Вхідні дані

- **Головний ключ (Main key):**

63e353ae93ecbfe00271de53b6f02a46


- **Шифротекст (Ciphertext):**

76c3ada7f1f7563ff30d7290e58fb4476eb12997d02a6488201c075da52ff3890260e2c89f631e7f919af96e4e47980a


- **Ініціалізаційний вектор (IV):**

75b777fc8f70045c6006b39da1b3d622

---

## Обраний алгоритм та ключ для MAC

### Алгоритм аутентифікації
Для обчислення імітовставки використано **HMAC-SHA256**.

**Переваги вибору:**
- HMAC — стандартний та перевірений механізм автентифікації повідомлень.  
- SHA-256 забезпечує криптографічну стійкість (256-бітна безпека).  
- Реалізований у стандартній бібліотеці Python (`hmac`, `hashlib`) — без зовнішніх залежностей.  
- Простий, надійний і рекомендований *NIST* та *IETF (RFC 2104)*.

---

### Ключ для обчислення MAC
Не рекомендується використовувати один і той самий ключ і для шифрування, і для MAC.  
Тому з головного ключа згенеровано **окремий ключ для MAC** за допомогою HMAC-деривації:

mac_key = HMAC-SHA256(main_key, b"mac-key-derivation")


Це дозволяє:
- Розділити криптографічні функції (шифрування / автентифікація);
- Уникнути повторного використання одного й того самого ключа;
- Забезпечити кращу ізоляцію безпеки.

---

### Дані, включені в MAC
Для генерації MAC використовується **конкатенація IV та шифротексту**:

data_to_mac = IV || ciphertext

Це забезпечує:
- Перевірку цілісності як самого повідомлення, так і IV;
- Захист від атак, де IV може бути змінено для впливу на розшифрований результат;
- Просту і однозначну структуру даних.

---

Результат виконання

Після запуску скрипта створюється файл
mac_hex.txt, який містить обчислений MAC у hex-форматі:

b8799e020468bedd5874c85b5cb2332558b11cf18da6356b34b082925319c7a0

Обґрунтування вибору
Компонент	Обґрунтування
HMAC-SHA256	Перевірений, криптографічно стійкий алгоритм для аутентифікації повідомлень.
Окремий ключ для MAC	Уникнення повторного використання ключів (краща ізоляція безпеки).
IV + Ciphertext	Гарантує, що жоден параметр (ані IV, ані шифротекст) не був змінений.
Python stdlib	Легка відтворюваність, без зовнішніх бібліотек, повна прозорість коду.

Альтернативи

AES-CMAC — якщо необхідно базуватись на блочному шифрі.

HMAC-SHA512 — для більшої довжини MAC.

HKDF (RFC 5869) — більш формальний спосіб виводу ключів.

AEAD (AES-GCM, ChaCha20-Poly1305) — сучасний підхід, де шифрування і MAC виконуються разом.

Висновок

Алгоритм HMAC-SHA256 з похідним ключем від основного (mac-key-derivation)
та даними IV || ciphertext забезпечує:

цілісність і автентичність зашифрованих даних;

простоту реалізації;

відповідність кращим криптографічним практикам.

Результат збережено у файлі mac_hex.txt.




